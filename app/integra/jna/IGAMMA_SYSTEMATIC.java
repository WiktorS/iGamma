package integra.jna;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import com.sun.jna.Pointer;
/**
 * <i>native declaration : iGammaJNAiGammaJNA.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IGAMMA_SYSTEMATIC extends Structure {
	public long uiParentId;
	public long uiId;
	/// C type : char[64]
	public byte[] szName = new byte[64];
	/// C type : char[64]
	public byte[] szDesc = new byte[64];
	public IGAMMA_SYSTEMATIC() {
		super();
		setAlignType(Structure.ALIGN_NONE);
	}
	public IGAMMA_SYSTEMATIC(Pointer pointer) {
		super(pointer, Structure.ALIGN_NONE);
		read();
	}
   @Override
	protected List getFieldOrder() {
		return Arrays.asList("uiParentId", "uiId", "szName", "szDesc");
	}
	/**
	 * @param szName C type : char[64]<br>
	 * @param szDesc C type : char[64]
	 */
	public IGAMMA_SYSTEMATIC(long uiParentId, long uiId, byte szName[], byte szDesc[]) {
		super();
		this.uiParentId = uiParentId;
		this.uiId = uiId;
		if (szName.length != this.szName.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szName = szName;
		if (szDesc.length != this.szDesc.length) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDesc = szDesc;
		setAlignType(Structure.ALIGN_NONE);
	}
	public static class ByReference extends IGAMMA_SYSTEMATIC implements Structure.ByReference {
		
	};
	public static class ByValue extends IGAMMA_SYSTEMATIC implements Structure.ByValue {
		
	};
}
